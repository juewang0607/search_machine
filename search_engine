//
//  main.cpp
//  search_machine
//
//  Created by Jue wang on 7/9/20.
//  Copyright © 2020 Jue wang. All rights reserved.
//
#include <iostream>
#include <iomanip>
#include <fstream>
#include <unordered_map>
#include <map>
#include <vector>
using namespace std;

// unprdered_map is the hashmap implemented in C++
unordered_map<string, int> wordLibrary;
unordered_map<string, int> stopWords;
unordered_map<string, vector<int>> index0;
vector<string> vLoadData;

// parameter: absolute path of dataset
// no output, save all words in "unordered_map wordLibrary"

void loadWordLibrary(string path) {
    //initailzie container
    // read the element in the text
    string line;
    ifstream myfile(path);
    if (myfile.is_open())
    {
        while (getline (myfile, line))
        {
            wordLibrary[line.substr(2,line.length())] = 1;
        }
        myfile.close();
    }
    else cout<<"unable to open file";
    return;
}

// parameter: absolute path of stopword
// no output, save all stopwords in "unordered_map stopWords"
void loadStopWords(string path) {
    //initailzie container
    // read the element in the text
    string line;
    ifstream myfile(path);
    if (myfile.is_open())
    {
        while (getline (myfile, line))
        {
            stopWords[line.substr(0,line.length()-1)] = 1;
        }
        myfile.close();
    }
    else cout<<"unable to open file";
    return;
}


// parameter: absolute path of music dataset
// output: convert each music as a string, save them with a vector
vector<string> loadData(string path) {
    //initailzie container
    // read the element in the text
    string line;
    ifstream myfile(path);
    if (myfile.is_open())
    {
        // if the file has lines
        while (getline (myfile, line))
        {
            int start = line.find("geci");
            int interval = line.find("composer")-start;
            string str = line.substr(start+7,interval-10);
            str.erase(std::remove(str.begin(),str.end(),','),str.end());
            str.erase(std::remove(str.begin(),str.end(),'"'),str.end());
            str.erase(std::remove(str.begin(),str.end(),'['),str.end());
            str.erase(std::remove(str.begin(),str.end(),']'),str.end());
            str.erase(std::remove(str.begin(),str.end(),' '),str.end());
            //cout<<str<<endl;
            vLoadData.push_back(str);
        }
        myfile.close();
    }
    else cout<<"unable to open file";
    return vLoadData;
}



// parameter: music content, which is a string
// output: split that into a vector of strings (forward index)
// e.g. 繁华中落入空门 -> [繁华，中，落入，空门]
vector<string> splitWords(string line) {
    vector<string> vSplitWords;
    string saveData = "";
    while (line.length() != 0)
    {
        for (int i = 30;i>0;i -= 3)
        {
            string temp = line.substr(0,i);
            if (wordLibrary.count(temp) != 0)
            {
                saveData = temp;
                vSplitWords.push_back(saveData);
                break;
            }
        }
        line = line.substr(saveData.length(),line.length()+saveData.length());
    }
    return vSplitWords;
}

// other way to implemnet splitWords
/*
vector<string> splitWords(string line) {
    vector<string> vSplitWords;
    string saveData = "";
    for (int i = 0; i<line.length(); ) {
        for (int l = 30; l>=; l-=3) {
            string temp = line.substr(i,i+l);
            if (wordLibrary.count(temp) != 0)
            {
                saveData = temp;
                vSplitWords.push_back(saveData);
                i += l;
                break;
            }
        }
        i += 3; // case where even single character does not match
    }

    return vSplitWords;
}
*/

// parameter: music content, which is a string
// output: delete words in the 中文停用词库
vector<string> deleteWords(vector<string> v){
    vector<string> vDeleteWords;
    for (auto& x: v){
        if (stopWords.count(x) == 0)
           {
               vDeleteWords.push_back(x);
           }
    }
    return vDeleteWords;
}


// parameter: vector(different music) of vector(various words within the music)
// no output, save index in "unordered_map index", word as key, list of music index who contains that word as value
void buildInvertIndex(vector<vector<string>> totalMusic) {
    for(int i = 0; i<totalMusic.size(); i++)
    {
        vector<string> music = totalMusic[i];
        for(auto word: music)//throughout all elements in the vector
        {
            if(index0.count(word) == 0)//if the word doesn't exist
            {
                vector<int> temp;//creat a new link to save the word which doesn't exist
                index0[word] = temp;
            }
            index0[word].push_back(i); // if the word exists,put it into the vector
        }
        
    }
    return;
}

vector<int> computeScore(vector<string>& query_words)
{
    unordered_map<int,int> score;//a vector to save the music ID with the score
                                // music ID -> music score
    for(auto word: query_words)//throughout all elements in the input vector
    {
        vector<int> idList = index0[word]; //get the list of the music ID
        for(auto id: idList)
        {
            score[id] += 1;// if find the same id, then plus one score
        }
    }
    map<int,vector<int>> score_invert; //save the music Id with score in order
                                        // muisic score -> music ID
    //1->[1,2] which means the first and the second song get 1 score
    //2->[3] which means that the third song gets 2 scores
    for (auto iter = score.begin(); iter!=score.end();iter++)
    {
        int id = iter->first; //get the music id
        int score = iter->second; //get the music score
        if(score_invert.count(score) == 0)
        {
            vector<int> temp;
            score_invert[score] = temp;
        }
         score_invert[score].push_back(id);
    }
    
    vector<int> res;
    for(auto iter = score_invert.begin();iter!=score_invert.end();iter++) {
        vector<int> idList = iter->second;
        for(auto id: idList) {
            res.push_back(id);
        }
    }
    reverse(res.begin(),res.end());//reverse the vector;
    
    
    return res;
}

//show the recommendation
void show(vector<int>& recommendations) {
    for(int i = 0; i<recommendations.size();i++) {
        int id = recommendations[i];
        cout << "Recommendation " + to_string(i) << endl;
        cout << vLoadData[id] << endl;
    }
    return;
}

int main (){
    loadWordLibrary
        ("/Users/juewang/Desktop/search_machine/search_machine/百度分词词库.txt");
    loadStopWords("/Users/juewang/Desktop/search_machine/search_machine/中文停用词库.txt");
    loadData("/Users/juewang/Desktop/search_machine/search_machine/music.txt");
    
    //find out wether the data saved in the vector successfully
    /*
    for (vector<string>::iterator it = vLoadData.begin() ; it != vLoadData.end(); ++it)
        cout << ' ' << *it;
    cout << '\n';
    
    
     */
    
    vector<vector<string>> totalMusic;
    /*
    //sanity check
    for(auto& x: vLoadData) {
        totalMusic.push_back(deleteWords(splitWords(x)));
        
        for (int i = 0; i < totalMusic[0].size() ; i++) { // print all string in first vector of 'arr'
           cout << totalMusic[0][i] << " ";
        }
    }
     */
    
    buildInvertIndex(totalMusic);

    //get the input from the command line
    
    
    string input;
    cout<<"the music"<<endl;
    cin >> input;
    vector<string> query_words = deleteWords(splitWords(input));//split the input and delete the unnecessary words;
    vector<int> recommendations = computeScore(query_words);

    show(recommendations);
    
    return 0;
}
